{"version":3,"sources":["components/images/pus.png","components/images/visa.png","components/card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeNumber","e","isNaN","target","value","length","setState","number","alert","state","changeName","name","toUpperCase","changeDate","date","slice","react_default","a","createElement","className","class","src","puce","alt","padEnd","split","map","x","i","join","visa","type","onChange","placeholder","Component","App","card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e12c0f93.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pus.a8c8030b.png\";","module.exports = __webpack_public_path__ + \"static/media/visa.007dcb60.png\";","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport puce from './images/pus.png';\r\nimport visa from './images/visa.png';\r\nclass Card extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n        number:'',\r\n        name:'Your Name',\r\n        date:'',\r\n        \r\n        }\r\n    }\r\nchangeNumber=(e)=>{\r\n  if(!isNaN(e.target.value) && (e.target.value.length<=16) ){\r\n      this.setState({\r\n          number:e.target.value,\r\n          \r\n      })\r\n      \r\n  }else{\r\n      alert('Please write a number')\r\n      e.target.value=this.state.number;\r\n  }\r\n    }\r\n    changeName=(e)=>{\r\nif(isNaN(e.target.value) && (e.target.value.length<=20)){\r\n    this.setState({\r\n        name:e.target.value.toUpperCase()\r\n    })\r\n    \r\n}else{\r\n    alert('Please write a caracter')\r\n    e.target.value=this.state.name;\r\n}\r\n    }\r\n    changeDate=(e)=>{\r\nif(this.state.date.length<=5){\r\n    if ((e.target.value.slice(0, 2)<=12) && (e.target.value.slice(3, 5) <=31)) {\r\n        this.setState({ date: e.target.value });\r\n    }\r\n    else {\r\n        this.setState({ date: \"12/31\" })\r\n    }\r\n   \r\n}\r\n\r\n}\r\n    \r\n    render() { \r\n        return ( \r\n            <div className=\"App\">\r\n                <section className=\"section\">\r\n                    <div className=\"div1\">\r\n                    <p class=\"title\"> CREDIT CARD</p>\r\n        <div className=\"div1-1\">\r\n         <img src={puce} className=\"logo\" alt=\"logo\"/>\r\n         <p className=\"craditNumber\">{this.state.number.padEnd(16, '*').split('').map((x, i) => { return i===4 || i===8  || i===12 ? \" \" + x : x }).join('')}</p>\r\n        </div>\r\n        <div className=\"div2-1\">\r\n        <h2 className=\"h-div2-1\"> 5422</h2>\r\n        <p className=\"valid\">valid <br/> thru</p>\r\n        <p className='month'>month/year <br/><span className=\"span\">{this.state.date.padEnd(4, '-').split('').map((x, i) => { return i === 2 ? \"/\" + x : x }).join('')}</span></p>\r\n        </div>\r\n        <div className=\"div3-1\">\r\n         <h2 className=\"h-div3-1\">{this.state.name}</h2>\r\n         <img src={visa} className=\"visa\" alt=\"visa\"/>\r\n        </div>\r\n\r\n                    </div>\r\n                    <div className=\"div4\">\r\n                     <div className=\"div4-1\">\r\n                     <label>Number:\r\n                     <input type=\"text\" onChange={this.changeNumber} placeholder=\"Ecrire votre nombre ici\" /> \r\n                     </label>\r\n                     </div>\r\n                     <div className=\"div4-2\">\r\n                     <label>Name:\r\n                     <input type=\"text\" onChange={this.changeName} placeholder=\"Ecrire votre nom ici\"/>  \r\n                     </label>\r\n                     </div> \r\n                     <div className=\"div4-3\">\r\n                    <label>validThru:\r\n                     <input type=\"text\" onChange={this.changeDate} placeholder=\"Ecrire votre date ici\"/>\r\n                     </label>\r\n                     </div> \r\n                    </div>\r\n                </section>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Card;","import React, { Component } from 'react';\nimport Card from './components/card.js';\nimport './App.css'\nclass App extends Component {\n  state = {  }\n  render() { \n    return ( \n      <Card/>\n     );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}